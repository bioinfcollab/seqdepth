manifest {
    name        = 'SeqDepth pipeline'
    description = 'SeqDepth pipeline'
    version     = '0.7'
    author      = 'alex@biotec.tu-dresden.de'
}

params {
    // MAIN PARAMETERS
    datadir             = ''
    outdir              = "$baseDir/workflow_results"
    median_per_chr      = "$outdir/median"
    mode                = 'copy'
    help                = null
    nproc               = 2
    minDepth            = '15e6'
    currentTotalDepth   = '30e6'
    minAcceptedProb     = 0.8
    tocheck             = 20
    temp                = '/tmp'
    container           = "$baseDir/containers/seqdepth.sif"
    split               = 10
    chromosome          = null
    chrom_prefix        = null
    hpcproject          = ''
    task                = 'median'
    containerOptions    = null


    // RESOURCES
    max_memory   = 3.GB
    max_cpus     = 16
    max_time     = '6-0:00:00'
}

// override TMPDIR environment variable since it is respected by the perl scripts
env.TMPDIR = params.temp

// SINGULARITY SETTINGS
def singularityOptions() {
    singularity {
        enabled = true
        cacheDir = "$baseDir/containers"
        runOptions = "--cleanenv --bind $PWD"
        autoMounts = true
    }
}

profiles {
    local {
        executor = 'local'
        singularityOptions()
    }
    slurm {
        includeConfig './configs/slurm_profile.config'
    }
    biocluster4 {includeConfig './configs/biocluster4_slurm.config' }
    smoke_test {
        executor = 'local'
        checkBindPaths()
        singularityOptions()
    }

}

// cleanup of the working dir
// cleanup = true

// Capture exit codes from upstream processes when piping
// ALL PROCESSES
process {
    shell = ['/bin/bash', '-euo', 'pipefail']
    container = "${params.container}"
    containerOptions = params.containerOptions
    cache = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    errorStrategy = 'terminate'
}

def pipelineName_f() {
    p_name='SeqDepth'
    if (params.chromosome) {
        p_name = p_name + '_' + params.chromosome
    }
    return p_name
}

pipelineName = pipelineName_f()

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
    enabled = true
    file    = "${baseDir}/pipeline_info/timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    file = "${baseDir}/pipeline_info/report_${trace_timestamp}.html"
}

trace {
    enabled = true
    file = "${baseDir}/pipeline_info/trace_${trace_timestamp}.txt"
}

dag {
    enabled = false
    file = "${baseDir}/pipeline_info/dag_${trace_timestamp}.svg"
}
